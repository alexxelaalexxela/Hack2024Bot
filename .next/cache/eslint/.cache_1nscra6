[{"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/_app.tsx":"1","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/_document.tsx":"2","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/api/chat/message.ts":"3","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/api/hello.ts":"4","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/index.tsx":"5","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/CallBob.tsx":"6","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/CallHistory.tsx":"7","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/CallManager.tsx":"8","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/ConversationIdeasModal.tsx":"9","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/ConversionIdea.tsx":"10","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/GithubLink.tsx":"11","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/LanguageDropdown.tsx":"12","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/LanguageManager.tsx":"13","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/MainLayout.tsx":"14","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/MessageBox.tsx":"15","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/TalkButton.tsx":"16","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/callUtil.ts":"17","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/lib/i18n/getServerTranslations.ts":"18"},{"size":333,"mtime":1711062628723,"results":"19","hashOfConfig":"20"},{"size":234,"mtime":1711065460123,"results":"21","hashOfConfig":"20"},{"size":1006,"mtime":1711065474306,"results":"22","hashOfConfig":"20"},{"size":305,"mtime":1711062628724,"results":"23","hashOfConfig":"20"},{"size":498,"mtime":1711062628724,"results":"24","hashOfConfig":"20"},{"size":1481,"mtime":1711066587615,"results":"25","hashOfConfig":"20"},{"size":6836,"mtime":1711065474302,"results":"26","hashOfConfig":"20"},{"size":6364,"mtime":1711062628721,"results":"27","hashOfConfig":"20"},{"size":2942,"mtime":1711065474302,"results":"28","hashOfConfig":"20"},{"size":1544,"mtime":1711065474303,"results":"29","hashOfConfig":"20"},{"size":421,"mtime":1711066155775,"results":"30","hashOfConfig":"20"},{"size":1819,"mtime":1711062628721,"results":"31","hashOfConfig":"20"},{"size":1307,"mtime":1711062628721,"results":"32","hashOfConfig":"20"},{"size":1117,"mtime":1711065474303,"results":"33","hashOfConfig":"20"},{"size":667,"mtime":1711065474303,"results":"34","hashOfConfig":"20"},{"size":2771,"mtime":1711065503837,"results":"35","hashOfConfig":"20"},{"size":1144,"mtime":1711062628721,"results":"36","hashOfConfig":"20"},{"size":698,"mtime":1711062628721,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l1u43j",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/_app.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/_document.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/api/chat/message.ts",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/api/hello.ts",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/pages/index.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/CallBob.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/CallHistory.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/CallManager.tsx",["93"],[],"import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\n\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { useTranslation } from 'next-i18next';\nimport { useLanguage } from './LanguageManager';\n\nimport { getChatGptAnswer } from './callUtil';\nimport { CallHistoryType } from './CallHistory';\n\nexport interface MessageType {\n  message: string;\n  sender: string;\n}\n\ninterface CallContextType {\n  userCall: () => void;\n  userSpeak: () => void;\n  userStopSpeaking: () => void;\n  listening: boolean;\n  isCalling: boolean;\n  endCall: () => void;\n  handleSend: (message: string) => void;\n  messages: MessageType[];\n  isChatbotSpeaking: boolean;\n}\n\nconst CallContext = createContext<CallContextType | undefined>(undefined);\n\ntype CallManagerProps = {\n  children: React.ReactNode;\n};\n\nconst CallManager: React.FC<CallManagerProps> = ({ children }) => {\n  const isUserCalling = useRef(false);\n  const isChatbotSpeaking = useRef(false);\n\n  const commands = [\n    {\n      command: ['*'],\n      callback: (command: string) => handleSend(command),\n    },\n  ];\n\n  const [isBobSpeaking, setIsBobSpeaking] = useState(isChatbotSpeaking.current);\n  const [isCalling, setIsCalling] = useState(isUserCalling.current);\n  const { transcript, resetTranscript, listening } = useSpeechRecognition({\n    commands,\n  });\n  const { t } = useTranslation();\n  const [userSpeechSynthesis, setUserSpeechSynthesis] = useState<SpeechSynthesis>();\n  const [userLocalStorage, setUserLocalStorage] = useState<Storage>();\n  const { selectedLanguage } = useLanguage();\n  const defaultIntroduction = t('bob.introduction');\n  const defaultMessage = [\n    {\n      message: defaultIntroduction,\n      sender: 'ChatGPT',\n    },\n  ];\n  const [messages, setMessages] = useState<MessageType[]>(defaultMessage);\n\n  useEffect(() => {\n    setUserSpeechSynthesis(window.speechSynthesis);\n    setUserLocalStorage(localStorage);\n  }, []);\n\n  // if selectedLanguage changes, reset call\n  useEffect(() => {\n    endCall();\n  }, [defaultIntroduction, selectedLanguage]);\n\n  const chatBotSpeak = (message: string) => {\n    if (isChatbotSpeaking.current || !userSpeechSynthesis || !isUserCalling.current) {\n      return;\n    }\n\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      userSpeechSynthesis.speak(\n        new SpeechSynthesisUtterance(t('bob.browserNotSupportSpeechRecognitionMessage'))\n      );\n      return;\n    }\n    const utterance = new SpeechSynthesisUtterance(message);\n    utterance.lang = selectedLanguage;\n    utterance.onstart = handleChatbotSpeechStart;\n    utterance.onend = handleChatbotSpeechEnd;\n    userSpeechSynthesis.speak(utterance);\n  };\n\n  const handleChatbotSpeechStart = () => {\n    isChatbotSpeaking.current = true;\n    setIsBobSpeaking(true);\n    SpeechRecognition.stopListening();\n  };\n\n  const handleChatbotSpeechEnd = () => {\n    if (isUserCalling.current) {\n      SpeechRecognition.startListening({ language: selectedLanguage });\n    }\n    isChatbotSpeaking.current = false;\n    setIsBobSpeaking(false);\n  };\n\n  const handleSend = async (message: string) => {\n    if (!message) {\n      return;\n    }\n    const formattedMessage = {\n      message,\n      direction: 'outgoing',\n      sender: 'user',\n    };\n\n    const updatedMessages = [...messages, formattedMessage];\n\n    setMessages(updatedMessages);\n\n    // Call from conversation ideas\n    if (!isUserCalling.current) {\n      isUserCalling.current = true;\n      setIsCalling(isUserCalling.current);\n    }\n    if (isChatbotSpeaking.current) {\n      userSpeechSynthesis?.cancel();\n      isChatbotSpeaking.current = false;\n      setIsBobSpeaking(false);\n    }\n    const chatGPTAnswer = await getChatGptAnswer(updatedMessages);\n    setMessages([\n      ...updatedMessages,\n      {\n        message: chatGPTAnswer,\n        sender: 'ChatGPT',\n      },\n    ]);\n    chatBotSpeak(chatGPTAnswer);\n  };\n\n  const userSpeak = () => {\n    SpeechRecognition.startListening({ language: selectedLanguage });\n\n    if (transcript !== '') {\n      resetTranscript();\n    }\n  };\n  const userStopSpeaking = () => {\n    SpeechRecognition.stopListening();\n  };\n\n  const userCall = () => {\n    isUserCalling.current = true;\n    setIsCalling(isUserCalling.current);\n\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      setMessages([\n        ...messages,\n        {\n          message: t('bob.browserNotSupportSpeechRecognitionMessage'),\n          sender: 'ChatGPT',\n        },\n      ]);\n      isUserCalling.current = false;\n      setIsCalling(isUserCalling.current);\n      return;\n    }\n\n    const firstMessage = t('bob.firstMessage');\n    const formattedMessage = {\n      message: firstMessage,\n      sender: 'assistant',\n    };\n\n    const updatedMessages = [...messages, formattedMessage];\n\n    setMessages(updatedMessages);\n    chatBotSpeak(firstMessage);\n  };\n\n  const resetConversation = () => {\n    setMessages(defaultMessage);\n  };\n\n  const updateCallHistory = () => {\n    if (userLocalStorage && messages.length > 1) {\n      const storage = userLocalStorage.getItem('callHistory')\n        ? JSON.parse(userLocalStorage.getItem('callHistory') as string)\n        : [];\n      const newCallHistory: CallHistoryType[] = [...storage, { messages, date: new Date() }];\n      userLocalStorage?.setItem('callHistory', JSON.stringify(newCallHistory));\n    }\n  };\n\n  const hangUp = () => {\n    SpeechRecognition.stopListening();\n    resetConversation();\n    isUserCalling.current = false;\n    setIsCalling(isUserCalling.current);\n    if (isChatbotSpeaking.current) {\n      userSpeechSynthesis?.cancel();\n      isChatbotSpeaking.current = false;\n      setIsBobSpeaking(false);\n    }\n    SpeechRecognition.abortListening();\n  };\n\n  const endCall = () => {\n    hangUp();\n    updateCallHistory();\n  };\n\n  return (\n    <CallContext.Provider\n      value={{\n        userCall,\n        userSpeak,\n        userStopSpeaking,\n        listening,\n        isCalling,\n        endCall,\n        handleSend,\n        messages,\n        isChatbotSpeaking: isBobSpeaking,\n      }}\n    >\n      {children}\n    </CallContext.Provider>\n  );\n};\n\nexport const useCallManager = () => {\n  const context = useContext(CallContext);\n  if (context === undefined) {\n    throw new Error('useCallManager must be used within a CallManager');\n  }\n  return context;\n};\n\nexport default CallManager;\n","/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/ConversationIdeasModal.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/ConversionIdea.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/GithubLink.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/LanguageDropdown.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/LanguageManager.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/MainLayout.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/MessageBox.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/TalkButton.tsx",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/components/callUtil.ts",[],[],"/Users/alexandreclin/Desktop/hack2024/hackLast/Hack2024Bot/lib/i18n/getServerTranslations.ts",[],[],{"ruleId":"94","severity":1,"message":"95","line":70,"column":6,"nodeType":"96","endLine":70,"endColumn":45,"suggestions":"97"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'endCall'. Either include it or remove the dependency array.","ArrayExpression",["98"],{"desc":"99","fix":"100"},"Update the dependencies array to be: [defaultIntroduction, endCall, selectedLanguage]",{"range":"101","text":"102"},[2044,2083],"[defaultIntroduction, endCall, selectedLanguage]"]